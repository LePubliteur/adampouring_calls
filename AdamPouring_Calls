from typing import TypedDict, Tuple
import requests
import telebot
import secrets

# Types
class NumberResponse(TypedDict):
  phone_number: str

GenerateNumberArgs = Tuple[str, str, int]

bot = telebot.TeleBot(secrets.TELEGRAM_API_KEY)

username = "myusername123"  
AUTOFICATIONS_API_KEY = secrets.token_hex(secrets.AUTOFICATIONS_API_KEY) 
website_id = 1  

# Generate phone number 
def generate_number(args: GenerateNumberArgs) -> NumberResponse:
  """Generate a phone number from the Autofications API.
  
  Args:
    args (Tuple[str, str, int]): Username, API key and website ID
  
  Returns:
    NumberResponse: The generated phone number 
  """
  username, api_key, website_id = args  
  
  try: 
    response = requests.get(f"https://autofications.com/V2/API.php?{username}&{api_key}&{website_id}")
    response.raise_for_status()   
  except requests.HTTPError as e:
    raise ValueError(f"Error generating number: {e}") 
  
  if response.status_code == 200: 
    number_response = response.json()
    return number_response  
  else:
    bot.send_message(message.chat.id, "Sorry, the API is currently unavailable. Please try again later.") 

@bot.message_handler(commands=['generate_phone']) 
def generate_phone(message) -> None:
  """Generate a phone number from user command."""
  if not validate(message.text):
    bot.send_message(message.chat.id, "Invalid command format. Usage: /generate_phone")
    return 
  
  args = (username, AUTOFICATIONS_API_KEY, website_id)
  number = generate_number(args)
  bot.send_message(message.chat.id, f"Phone number generated: {number['phone_number']}")

def validate(text: str) -> bool:
  """Validate `/generate_phone` command input."""
  # Add input validation here
  return True
